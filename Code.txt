import java.util.*;

class Student {
    private String studentId;
    private String answer;

    public Student(String studentId) {
        this.studentId = studentId;
    }

    public void submitAnswer(String answer) {
        this.answer = answer;
    }

    public String getAnswer() {
        return answer;
    }

    public String getStudentId() {
        return studentId;
    }
}

abstract class Question {
    protected String questionText;
    protected List<String> options;

    public Question(String questionText, List<String> options) {
        this.questionText = questionText;
        this.options = options;
    }

    public String getQuestionText() {
        return questionText;
    }

    public List<String> getOptions() {
        return options;
    }

    public abstract boolean isAnswerValid(String answer);
    public abstract boolean isMultipleChoice();
}



class MultipleChoiceQuestion extends Question {
    public MultipleChoiceQuestion(String questionText, List<String> options) {
        super(questionText, options);
    }

    @Override
    public boolean isAnswerValid(String answer) {
        // Check if the answer is a single character and is contained within the options' first characters
        return answer.length() == 1 && options.stream().anyMatch(option -> option.substring(1, 2).equalsIgnoreCase(answer));
    }


    @Override
    public boolean isMultipleChoice() {
        return true;
    }
}

class SingleChoiceQuestion extends Question {
    public SingleChoiceQuestion(String questionText, List<String> options) {
        super(questionText, options);
    }

    @Override
    public boolean isAnswerValid(String answer) {
        return answer.equals("1") || answer.equals("2");
    }

    @Override
    public boolean isMultipleChoice() {
        return false;
    }
}

class VotingService {
    private List<Question> questions = new ArrayList<>();
    private Map<String, Map<String, Integer>> allVotes = new LinkedHashMap<>();

    public void configureQuestion(Question question) {
        questions.add(question);
        allVotes.put(question.getQuestionText(), new HashMap<>());
    }

    public void submitVote(Student student, Question question) {
        String studentAnswer = student.getAnswer();
        if (question.isAnswerValid(studentAnswer)) {
            String fullAnswer = null;
            if (question instanceof SingleChoiceQuestion) {
                fullAnswer = studentAnswer.equals("1") ? "[1] for Yes" : "[2] for No";
            } else if (question instanceof MultipleChoiceQuestion) {
                // Find the full option that starts with the given answer
                for (String option : question.getOptions()) {
                    if (option.substring(1, 2).equalsIgnoreCase(studentAnswer)) {
                        fullAnswer = option;
                        break;
                    }
                }
            }

            if (fullAnswer != null) {
                Map<String, Integer> voteCounts = allVotes.get(question.getQuestionText());
                voteCounts.put(fullAnswer, voteCounts.getOrDefault(fullAnswer, 0) + 1);
            }
        } else {
            System.out.println("Invalid answer from " + student.getStudentId() + ". Please choose from: " + question.getOptions());
        }
    }

    public void displayResults() {
        for (Question question : questions) {
            System.out.println("\nVoting Results for: " + question.getQuestionText());
            Map<String, Integer> voteCounts = allVotes.get(question.getQuestionText());
            for (String option : question.getOptions()) {
                System.out.println(option + ": " + voteCounts.getOrDefault(option, 0));
            }
        }
    }

    public void displayConsolidatedResults() {
        System.out.println("\nVoting Results For All Questions:");
        Map<String, Integer> consolidatedResults = new HashMap<>();

        // Initialize the map with all possible answers
        consolidatedResults.put("A", 0);
        consolidatedResults.put("B", 0);
        consolidatedResults.put("C", 0);
        consolidatedResults.put("D", 0);
        consolidatedResults.put("True", 0);
        consolidatedResults.put("False", 0);

        // Tally votes for each option
        for (Map<String, Integer> voteCounts : allVotes.values()) {
            for (Map.Entry<String, Integer> entry : voteCounts.entrySet()) {
                String key = entry.getKey().substring(1, 2); // Get the option letter
                if (key.equals("1")) {
                    key = "True";
                } else if (key.equals("2")) {
                    key = "False";
                }
                consolidatedResults.put(key, consolidatedResults.get(key) + entry.getValue());
            }
        }

        // Display the tallied results
        System.out.println("[A]: " + consolidatedResults.get("A"));
        System.out.println("[B]: " + consolidatedResults.get("B"));
        System.out.println("[C]: " + consolidatedResults.get("C"));
        System.out.println("[D]: " + consolidatedResults.get("D"));
        System.out.println("[True]: " + consolidatedResults.get("True"));
        System.out.println("[False]: " + consolidatedResults.get("False"));
    }

}


public class Simulation {
    public static void main(String[] args) {
        VotingService votingService = new VotingService();
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        Map<String, String> studentRecords = new HashMap<>();

        System.out.println("Welcome to the iVote Service!");
        System.out.println("=============================\n");

        // Configure questions
        MultipleChoiceQuestion mcq = new MultipleChoiceQuestion(
                "1. What are your favorite programming languages?",
                Arrays.asList("[A] Java", "[B] Python", "[C] C++", "[D] Rust"));

        MultipleChoiceQuestion mcq2 = new MultipleChoiceQuestion(
                "2. What is your favorite day?",
                Arrays.asList("[A] Monday", "[B] Tuesday", "[C] Friday", "[D] Saturday"));

        SingleChoiceQuestion scq = new SingleChoiceQuestion(
                "3. Is this simulation helpful?",
                Arrays.asList("[1] for Yes", "[2] for No"));

        SingleChoiceQuestion scq2 = new SingleChoiceQuestion(
                "4. Is this class CS3560?",
                Arrays.asList("[1] for Yes", "[2] for No"));

        List<Question> questions = Arrays.asList(mcq, mcq2, scq, scq2);
        for (Question question : questions) {
            votingService.configureQuestion(question);
        }

        String mode = ""; // Initialize mode to an empty string
        boolean validMode = false;

        while (!validMode) {
            System.out.println("Press [1] for manual mode");
            System.out.println("Press [2] for automatic mode");
            mode = scanner.nextLine();

            if ("1".equals(mode) || "2".equals(mode)) {
                validMode = true;
            } else {
                System.out.println("Invalid mode selection. Please enter 1 or 2.");
            }
        }

        if ("2".equals(mode)) {
            // Automatic mode
            int numberOfStudents = 10 + random.nextInt(41);
            System.out.println("Number of students participating: " + numberOfStudents);

            for (int i = 0; i < numberOfStudents; i++) {
                String studentId = String.format("%05d", random.nextInt(100000));
                Student student = new Student(studentId);

                for (Question question : questions) {
                    List<String> options = question.getOptions();
                    String answer;

                    if (question.isMultipleChoice()) {
                        int index = random.nextInt(options.size());
                        answer = options.get(index).substring(1, 2);
                    } else {
                        answer = "" + (1 + random.nextInt(2));
                    }

                    student.submitAnswer(answer);
                    votingService.submitVote(student, question);
                }
            }
        } else if ("1".equals(mode)) {
            // Manual mode
            int numberOfStudents = 0;
            boolean validInput = false;
        
            while (!validInput) {
                try {
                    System.out.print("How many students are using the iVote service? ");
                    numberOfStudents = Integer.parseInt(scanner.nextLine());
                    if (numberOfStudents > 0) {
                        validInput = true;
                    } else {
                        System.out.println("Please enter a positive integer.");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a positive integer.");
                }
            }
        

            for (int i = 0; i < numberOfStudents; i++) {
                String studentName;
                String studentId;
                boolean validName;

                do {
                    validName = true;
                    System.out.print("Enter student's name: ");
                    studentName = scanner.nextLine();

                    if (studentRecords.containsKey(studentName)) {
                        validName = false;
                        System.out.println("A student may only take the test once.");
                        System.out.println("The student ID " + studentRecords.get(studentName) + " has already been used.");
                        System.out.println("Please enter a new name.");
                    } else {
                        studentId = String.format("%05d", (int)(Math.random() * 100000));
                        System.out.println("This is " + studentName + "'s ID number: " + studentId);
                        studentRecords.put(studentName, studentId);
                        Student student = new Student(studentId);

                        for (Question question : questions) {
                            System.out.println(question.getQuestionText());
                            System.out.println("Choose an answer from: " + String.join(", ", question.getOptions()));
                            String answer = scanner.nextLine();
                            student.submitAnswer(answer);

                            while (!question.isAnswerValid(answer)) {
                                System.out.println("Invalid answer. Please choose from: " + String.join(", ", question.getOptions()));
                                answer = scanner.nextLine();
                                student.submitAnswer(answer);
                            }

                            votingService.submitVote(student, question);
                        }
                    }
                } while (!validName);
            }
        } else {
            System.out.println("Invalid mode selection. Please select 1 or 2.");
        }

        // Display results after all questions have been answered
        votingService.displayResults();
        votingService.displayConsolidatedResults();
        scanner.close();
    }
}